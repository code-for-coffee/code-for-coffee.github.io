<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code for coffee</title>
    <description>The professional website of James Traver
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 02 Nov 2016 21:21:12 -0500</pubDate>
    <lastBuildDate>Wed, 02 Nov 2016 21:21:12 -0500</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>Categorizing Exoplanets by Type: Part One - Research</title>
        <description>&lt;p&gt;It is no secret that I am a space nerd. Over the past few months, I have decided to work on an Exoplanet visualization application (based on an Android application prototype that I had designed). I decided that I wanted to see how many planets of what type have been found by Kepler. The goal is to create a module that will allow users to input a CSV file from the &lt;a href=&quot;http://exoplanetarchive.ipac.caltech.edu/cgi-bin/TblView/nph-tblView?app=ExoTbls&amp;amp;config=planets&quot;&gt;NASA Exoplanet Archive&lt;/a&gt; and then render a list of planets by type. This introduced a few interesting challenges. First, Javascript isn’t &lt;a href=&quot;http://stackoverflow.com/questions/11695618/dealing-with-float-precision-in-javascript&quot;&gt;very precise with floating point values&lt;/a&gt;. Second, how will I convert CSV data from NASA into something usable? Finally, how will I figure out what the planet type even is? Once I solve these questions, I can then take that knowledge and build a library/module/tool. However, before we can start, I needed to perform some research. In the firs part of this series of posts, I will outline my research, conclusion and results.&lt;/p&gt;

&lt;h4 id=&quot;project-outline&quot;&gt;Project Outline&lt;/h4&gt;

&lt;p&gt;Our user stories are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A user instantiates our module with a NASA provided CSV file as an argument&lt;/li&gt;
  &lt;li&gt;A user queries for a list of planets that kepler has detected and is provided an Object&lt;/li&gt;
  &lt;li&gt;A user queries for an official list of planetary types to view and is provided an Object&lt;/li&gt;
  &lt;li&gt;A user queries for a list of solar systems and is provided an Object&lt;/li&gt;
  &lt;li&gt;For any result a user requests, a user may export the results to a prettified JSON file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These sounds like  pretty reasonable user stories. The module itself is not too complex but serves a single purpose: to allow users to convert NASA Exoplanet data into something usable.&lt;/p&gt;

&lt;h4 id=&quot;getting-the-nasa-data&quot;&gt;Getting the NASA data&lt;/h4&gt;

&lt;p&gt;NASA provides most of their data in some format or another. The Exoplanet Archive at CalTech provides a &lt;a href=&quot;http://exoplanetarchive.ipac.caltech.edu/cgi-bin/TblView/nph-tblView?app=ExoTbls&amp;amp;config=planets&quot;&gt;very nice interface&lt;/a&gt;. They have provided a lot of data in this exoplanet table. We are able to speculate the mass of an exoplanet based on transits that it makes between our telescopes and its host star. This mass is usually referred to as a ‘Jupiter Mass’ (or, how many Jupiters it would take to achieve the mass of this planet). However, I needed to filter out superfluous data. Before I could determine what data we’ll need, I needed to figure out how planets are categorized. In 2011, &lt;a href=&quot;http://phl.upr.edu/library/notes/amassclassificationforbothsolarandextrasolarplanets&quot;&gt;Abel Mendez&lt;/a&gt; from the University of Puerto Rico at Arecibo published a paper that provides a scale to classify planets by their mass. However, these masses were in relative earth masses; not relative Jupiter masses.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;responsive-img&quot; src=&quot;/images/EMC.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I decided to structure these as JSON and as a Javascript module for future use.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/code-for-coffee/70d06dc8090d7645e728f5fd786d2774.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Thankfully, I can easily convert a Jupiter mass to an Earth mass. I do this by comparing how many Earth mases it would take to fill up Jupiter. According to wikipedia, &lt;a href=&quot;Jupiter is equivilent to 317.83 Earth masses&quot;&gt;https://en.wikipedia.org/wiki/Jupiter_mass&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Convert Jupiter mass to Earth Mass&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 (jupiter mass)       input_value
______               = ___________
317.83 (earth mass)    output_value
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In keeping with our user stories, I now know that we can find the planet type and with some math, calculate the available Jupiter mass values that each exoplanet has. I can also check off querying for a list of planet types; I just need to turn that into a data structure. I also need to know which star (or host) that the planet is orbiting around. &lt;a href=&quot;http://exoplanetarchive.ipac.caltech.edu/cgi-bin/TblView/nph-tblView?app=ExoTbls&amp;amp;config=planets&quot;&gt;Heading back to the exoplanet Archive&lt;/a&gt;, I begin to look at each column. I pay attention to a few values that I’ll think will be important: &lt;strong&gt;Row ID&lt;/strong&gt;, &lt;strong&gt;Host Name&lt;/strong&gt;, &lt;strong&gt;Planet Letter&lt;/strong&gt;, &lt;strong&gt;Number of Planets in System&lt;/strong&gt;, &lt;strong&gt;Planet Mass (in Jupiter Mass)&lt;/strong&gt;. I then &lt;em&gt;select columns&lt;/em&gt; and de-select every column but those I mentioned. From there, I select &lt;strong&gt;Download Table&lt;/strong&gt;, &lt;em&gt;download currently checked columns&lt;/em&gt;, and select &lt;em&gt;download table as CSV&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;responsive-img&quot; src=&quot;/images/exoplanet_tutorial.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Screenshot of the NASA Exoplanet Archive with Columns Filtered&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Awesome! Now I have this wonderful &lt;code class=&quot;highlighter-rouge&quot;&gt;planets.csv&lt;/code&gt; in my downloads folder. Upon inspection, it contains over a thousand rows of precious planets that the human race has discovered. Columns are identified in comments for ease of use/readability (thanks, NASA engineers).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csv&quot;&gt;# This file was produced by the NASA Exoplanet Archive  http://exoplanetarchive.ipac.caltech.edu
# Wed Nov  2 16:07:55 2016
#
# COLUMN pl_hostname:    Host Name
# COLUMN pl_letter:      Planet Letter
# COLUMN pl_pnum:        Number of Planets in System
# COLUMN pl_orbper:      Orbital Period [days]
# COLUMN pl_orbpererr1:  Orbital Period Upper Unc. [days]
# COLUMN pl_orbpererr2:  Orbital Period Lower Unc. [days]
# COLUMN pl_orbperlim:   Orbital Period Limit Flag
# COLUMN pl_bmassj:      Planet Mass or M*sin(i)[Jupiter mass]
# COLUMN pl_bmassjerr1:  Planet Mass or M*sin(i)Upper Unc. [Jupiter mass]
# COLUMN pl_bmassjerr2:  Planet Mass or M*sin(i)Lower Unc. [Jupiter mass]
# COLUMN pl_bmassjlim:   Planet Mass or M*sin(i)Limit Flag
# COLUMN pl_radj:        Planet Radius [Jupiter radii]
# COLUMN pl_radjerr1:    Planet Radius Upper Unc. [Jupiter radii]
# COLUMN pl_radjerr2:    Planet Radius Lower Unc. [Jupiter radii]
# COLUMN pl_radjlim:     Planet Radius Limit Flag
#
rowid,pl_hostname,pl_letter,pl_pnum,pl_orbper,pl_orbpererr1,pl_orbpererr2,pl_orbperlim,pl_bmassj,pl_bmassjerr1,pl_bmassjerr2,pl_bmassjlim,pl_radj,pl_radjerr1,pl_radjerr2,pl_radjlim
1,11 Com,b,1,326.03000000,0.32000000,-0.32000000,0,19.40000,1.50000,-1.50000,0,,,,
2,11 UMi,b,1,516.22000000,3.25000000,-3.25000000,0,10.50000,2.47000,-2.47000,0,,,,
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Sample CSV file from the Exoplanet Archive&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, I just need to convert my CSV to a JSON file for ease of use with Javascript. After some research, I found a nice &lt;a href=&quot;https://www.npmjs.com/package/csvtojson&quot;&gt;npm module&lt;/a&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;csvtojson&lt;/code&gt;. I decided to give it a whirl. After a bit, I threw together the following class to convert my CSV to JSON.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/code-for-coffee/0793992d6a521b813db3ac1aa373df73.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;To execute and test my code, I just run &lt;code class=&quot;highlighter-rouge&quot;&gt;node CSVObjectifier.js&lt;/code&gt; in the same directory as my CSV file. When I do, I get some weird results… each object looks mangled.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'# This file was produced by the NASA Exoplanet Archive  http://exoplanetarchive'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ipac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'CoRoT-28'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field4&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.20851&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field6&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.00038&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field7&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.00038&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field9&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.484&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field10&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.087&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field11&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.087&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field12&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field13&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.955&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field14&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.066&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field15&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.066&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;field16&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I hypothesize that this is because of the comments at the top of our CSV file (they begin with &lt;code class=&quot;highlighter-rouge&quot;&gt;# ...&lt;/code&gt;). To test this hypothesis, I remove the comments to the point where the first line of my CSV file is &lt;code class=&quot;highlighter-rouge&quot;&gt;rowid,pl_hostname,pl_letter,pl_pnum,pl_orbper,pl_orbpererr1,pl_orbpererr2,pl_orbperlim,pl_bmassj,...&lt;/code&gt; and save file. Upon testing, it appears that my hypothesis was validated: each POJO (plain old Javascript object) looks clean.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rowid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_hostname&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GJ 163'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_letter&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_pnum&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_orbper&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8.631&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_orbpererr1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_orbpererr2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_orbperlim&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_bmassj&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.035&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_bmassjerr1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_bmassjerr2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_bmassjlim&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_radj&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_radjerr1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_radjerr2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pl_radjlim&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3302&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;My output file looks like a great starting point for any Node.js (or really, anything) to work with!&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rowid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_hostname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;11 Com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_letter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_pnum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbper&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;326.03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbpererr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbpererr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;-0.32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbperlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;19.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjerr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjerr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;-1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjerr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjerr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rowid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_hostname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;11 UMi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_letter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_pnum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbper&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;516.22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbpererr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbpererr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;-3.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbperlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjerr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjerr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;-2.47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjerr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjerr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rowid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_hostname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;14 And&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_letter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_pnum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbper&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;185.84&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbpererr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbpererr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;-0.23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbperlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjerr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjerr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjerr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjerr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rowid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_hostname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;14 Her&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_letter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_pnum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbper&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1773.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbpererr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbpererr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;-2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbperlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjerr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjerr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;-0.19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjerr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjerr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rowid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_hostname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;16 Cyg B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_letter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_pnum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbper&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;798.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbpererr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbpererr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_orbperlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjerr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjerr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;-0.15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_bmassjlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjerr1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjerr2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pl_radjlim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;The above JSON output is truncated.&lt;/em&gt; View the full JSON file &lt;a href=&quot;https://gist.github.com/code-for-coffee/7f085a0c885d6fd3f271f1f8c392c224&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, I have been able to get the data I need, convert it a bit, and I know I can use it with practically anything now that it is JSON. My object structure even looks pretty!&lt;/p&gt;

&lt;h4 id=&quot;considering-mathematical-accuracy&quot;&gt;Considering Mathematical Accuracy&lt;/h4&gt;

&lt;p&gt;Javascript uses 64-bit floating point numbers for the &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; type that we use everything with &lt;code class=&quot;highlighter-rouge&quot;&gt;parseInt()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;parseFloat()&lt;/code&gt;. This means that we have an upper limit of a numerical value: &lt;a href=&quot;https://en.wikipedia.org/wiki/9223372036854775807&quot;&gt;9,223,372,036,854,775,807&lt;/a&gt;. Because one of the primary jobs in figuring out a planet’s size requires calculating what appear to be large numbers, we should write a script to see if any numerical values fall beyond this range. We can do so by looping through each object in our JSON. According to the CSV comments, &lt;em&gt;pl_bmassj&lt;/em&gt; is our key/column that contains the planet’s mass (see them commented above; I removed them from my CSV for conversion). To test this, I wrote a script that checked each row’s &lt;code class=&quot;highlighter-rouge&quot;&gt;pl_bmassj&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/code-for-coffee/b8b95ba78579e380db1bb757f3440ced.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;After running this script, it appears that none of my numbers are too large. This is excellent news (no need to implement a BigDecimal &lt;a href=&quot;https://github.com/dtrebbien/BigDecimal.js&quot;&gt;style library&lt;/a&gt;). However, in my log output I noticed that quite a few rows didn’t have values at all. This is okay; due to &lt;a href=&quot;https://en.wikipedia.org/wiki/Methods_of_detecting_exoplanets&quot;&gt;our current methods of detecting exoplanets&lt;/a&gt;, scientists are not always able to calculate an accurate mass. I should take a note of that and find out how many planets we can categorize vs how many we cannot.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/code-for-coffee/54c8a19218ba4b4fb42314338bf2d296.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So about 1/3 of confirmed exoplanets have mass. That data alone is interesting. Given all of the research that I have done so far, I now have a wealth of data and information to sift through. I have found that everything that I need: a way to categorize planets, mass information and the conversions needed, and I have ruled out any need for a large numeric type support in Javascript.&lt;/p&gt;

&lt;p&gt;In the next post in this series, I will take this knowledge and put it to use with Node.js. I’ll use the research acquired and begin building out a node module that anyone can use with the intent of putting it online for anyone to use. In the final post of the series, I’ll use the module to render findings on the NASA exoplanet dataset. See you soon!&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Nov 2016 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/How-to-categorize-confirmed-Exoplanet-types</link>
        <guid isPermaLink="true">http://localhost:4000/How-to-categorize-confirmed-Exoplanet-types</guid>
        
        
      </item>
    
      <item>
        <title>Using Gulp for ES6/Javascript 2015 Support</title>
        <description>&lt;p&gt;Wouldn’t it be nice if there was a way to convert ES6 to code every browser can support? Of course! Wouldn’t it be cool if you could include module support from Node in client side code? Certainly. What could do this sort of magic for us? &lt;em&gt;Gulp Tasks&lt;/em&gt;!&lt;/p&gt;

&lt;h4 id=&quot;goals&quot;&gt;Goals&lt;/h4&gt;

&lt;p&gt;By the end of this tutorial, you will understand:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What Gulp is and what it can do&lt;/li&gt;
  &lt;li&gt;How to install Gulp on your computer&lt;/li&gt;
  &lt;li&gt;How to write a Gulp task and run it&lt;/li&gt;
  &lt;li&gt;How to add use additional modules with Gulp&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;introducing-gulp&quot;&gt;Introducing: Gulp&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Gulp is a software built on Node.&lt;/li&gt;
  &lt;li&gt;It runs &lt;strong&gt;tasks&lt;/strong&gt; that manipulate files on your system.&lt;/li&gt;
  &lt;li&gt;It is an active, open-source project.&lt;/li&gt;
  &lt;li&gt;There are many community-built plugins built to work directly with gulp.&lt;/li&gt;
  &lt;li&gt;It is commonly used for bundling, minificiation, and ES6 support.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Grunt&lt;/strong&gt; is a popular alternative to Gulp.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;installing-gulp&quot;&gt;Installing Gulp&lt;/h4&gt;

&lt;p&gt;To install &lt;strong&gt;Gulp&lt;/strong&gt;, we should have a Node.js environment prepared. If you do not have one, you should visit &lt;a href=&quot;Nodejs.org&quot;&gt;https://nodejs.org/en/&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You’ll want to install gulp globally. You can do this by running the &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install gulp -g&lt;/code&gt; command.&lt;/li&gt;
  &lt;li&gt;This states that we want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; to install the &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; package globally (for any project to use).&lt;/li&gt;
  &lt;li&gt;Gulp requires that we store our tasks in a &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;. This should be in the same directory as your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We also need to include gulp in our project. To do that, we will run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install gulp --save-dev&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Now, we should run &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt;!&lt;/li&gt;
  &lt;li&gt;Oh no - we ran into a problem.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Using gulpfile ~/path/to/gulpfile.js
Task &lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt; is not &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;your gulpfile
Please check the documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;proper gulpfile formatting
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s solve this problem by defining a Gulp task.&lt;/p&gt;

&lt;h4 id=&quot;defining-a-gulp-task&quot;&gt;Defining a Gulp Task&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;What is a task?&lt;/li&gt;
  &lt;li&gt;A task is something we must do to achieve a result.&lt;/li&gt;
  &lt;li&gt;In Gulp, we create tasks to perform tasks that can transform our code.&lt;/li&gt;
  &lt;li&gt;A task may perform one job; it may also perform many at once.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; we need to include the &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; module. To do this, we should define a variable: &lt;code class=&quot;highlighter-rouge&quot;&gt;var gulp = require('gulp');&lt;/code&gt; This will allow us to call upon Gulp to &lt;strong&gt;create a task&lt;/strong&gt;.&lt;/p&gt;

&lt;h5 id=&quot;my-first-default-task&quot;&gt;My First (Default) Task&lt;/h5&gt;

&lt;p&gt;After declaring our &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; variable, we should create our first task. This will require us to call upon Gulp to define a task. We must also have a name for our task. By &lt;em&gt;default&lt;/em&gt;, Gulp requires a &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; task. It is the first task that Gulp will look for when reading your &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;. Let’s define our first (default) task:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'gulp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//define a task with the name of 'default' &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and a callback to perform when the task is ran&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'I am the default task. Hear me roar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(&lt;a href=&quot;https://github.com/code-for-coffee/gulp_workflows/blob/master/gulpfile_lo3.js&quot;&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In your terminal, run &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt;. This will have the library look for a &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; task in your &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;. It will then execute the callback that you define for your task. The output will appear as follows:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting &lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt;...
I am the default task. Hear me roar
Finished &lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt; after 144 μs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;project-a-gulp-workflow-that-supports-es6-and-modules-for-the-web&quot;&gt;Project: A Gulp Workflow that supports ES6 and Modules for the Web&lt;/h4&gt;

&lt;p&gt;We’re going to include a few external modules to create a Gulp workflow. Our workflow will support:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Node-style &lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt; statements using &lt;strong&gt;Browserify&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Support ES6 (ES2016) and JSX (for React.js) using &lt;strong&gt;Babelify&lt;/strong&gt; (and a few Babel plugins).&lt;/li&gt;
  &lt;li&gt;Compile individual modules together using &lt;strong&gt;vinyl-source-stream&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need to install a variety of modules. The installation commands are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save-dev browserify&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save-dev babelify&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save-dev babel-preset-es2015 babel-preset-react&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save-dev vinyl-source-stream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can then add our modules to our &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'gulp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browserify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'browserify'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babelify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'babelify'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'vinyl-source-stream'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’re all set with our dependencies. Now, it is time to create a file structure for our project. We should create a folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; for our actual Javascript application. We’ll create an &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; in that source directory. We should also create a &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; folder to contain our final, production-ready Javascript file.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;touch source/.gitkeep build/.gitkeep source/app.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You’ll notice that there is currently no file inside of our &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; directory other than a &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitkeep&lt;/code&gt;. We should define a task that will use the installed modules to transform our code and make it usable on the front-end. We should update our &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;’s &lt;strong&gt;default&lt;/strong&gt; task.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browserify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./source/app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;babelify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'build.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./build/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s identify what is going on inside of our &lt;strong&gt;default&lt;/strong&gt; task:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The task uses &lt;strong&gt;browserify&lt;/strong&gt; to include our modules that are required in our &lt;code class=&quot;highlighter-rouge&quot;&gt;source/app.js&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;It then transforms any ES6 (ES2015) and React JSX templates into usable code on the client side. This usually translates our modern Javascript code into ES5 that most current evergreen browsers support.&lt;/li&gt;
  &lt;li&gt;The task then bundles our files together.&lt;/li&gt;
  &lt;li&gt;Next, the task creates a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;build.js&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Gulp finally places the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.js&lt;/code&gt; inside of a destination (&lt;code class=&quot;highlighter-rouge&quot;&gt;dest&lt;/code&gt;) folder of &lt;code class=&quot;highlighter-rouge&quot;&gt;build/&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/code-for-coffee/gulp_workflows/blob/master/gulfpile_lo4.js&quot;&gt;The full version of this Gulpfile.js may be found here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; in your terminal. Inspect the &lt;code class=&quot;highlighter-rouge&quot;&gt;build/build.js&lt;/code&gt; file. &lt;em&gt;What do you see?&lt;/em&gt;&lt;/p&gt;

&lt;h5 id=&quot;verifying-that-everything-works&quot;&gt;Verifying that everything works&lt;/h5&gt;

&lt;p&gt;Let’s write some ES6. We’ll then use &lt;strong&gt;gulp&lt;/strong&gt; to run tasks that will create a file prepared for the client side. To verify everything works, we can run the script generated in the console.&lt;/p&gt;

&lt;p&gt;In my &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;, I want todefine an ES6 class called HelloWorld. The class should have a toString() method that returns ‘Hello, world!’. I will then instantiate a new instance of the class and console log the &lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt; method that it contains.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// define an ES6 class called HelloWorld&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// define a toString() method on the class&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello, world!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// instantiate a new instance of HelloWorld&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// console.log sample's toString() method&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(&lt;a href=&quot;https://github.com/code-for-coffee/gulp_workflows/blob/master/app.js&quot;&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Now, we should run &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; in the terminal. Upon completion, open the &lt;code class=&quot;highlighter-rouge&quot;&gt;build/build.js&lt;/code&gt; file. It will contain a large amount of obfuscated code such as &lt;code class=&quot;highlighter-rouge&quot;&gt;(function e(t,n,r){function s(o,u)....&lt;/code&gt;. Copy and paste this code into a browser’s Javascript console. Inside the console, you should see &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello, world!&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&quot;tips-and-tricks&quot;&gt;Tips and Tricks&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;You will need to re-run the &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; command every time you make a change.&lt;/li&gt;
  &lt;li&gt;There is &lt;code class=&quot;highlighter-rouge&quot;&gt;nodemon&lt;/code&gt; support for gulp.&lt;/li&gt;
  &lt;li&gt;You can have &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt; &lt;strong&gt;watch&lt;/strong&gt; files for changes using &lt;a href=&quot;https://www.npmjs.com/package/gulp-watch&quot;&gt;gulp-watch&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 18 Jan 2016 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/using-gulp-for-es6-support</link>
        <guid isPermaLink="true">http://localhost:4000/using-gulp-for-es6-support</guid>
        
        
      </item>
    
      <item>
        <title>Your first Sinatra web server with Ruby</title>
        <description>&lt;p&gt;This tutorial is designed to get you up and running with a Sinatra server with as little work as possible. This tutorial assumes that you have a basic knowledge of Ruby. However, it does not assume you know how to use Gems. If you haven’t used Ruby yet, that’s okay! Check out the language at http://tryruby.org. Now, it is time to build your first Sinatra based web server.&lt;/p&gt;

&lt;h4 id=&quot;introducing-sinatra&quot;&gt;Introducing Sinatra&lt;/h4&gt;

&lt;p&gt;Sinatra is a web framework. It is designed to listen for user requests and to provide responses. It is lightweight and designed to get to the point. As frameworks go, it is highly modular and built to scale. It is also (arguably) the easiest way to write a server in Ruby. Let’s get started by building a web server in Ruby!&lt;/p&gt;

&lt;h4 id=&quot;prepwork-with-gemfile&quot;&gt;1. Prepwork with Gemfile&lt;/h4&gt;

&lt;p&gt;You’ll need Sinatra. Time to install it! &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install sinatra&lt;/code&gt;. Next, you need the JSON gem to send responses back via JSON. This also allows us to call &lt;code class=&quot;highlighter-rouge&quot;&gt;.to_json&lt;/code&gt; on hashes (and other data types such as Arrays). You should &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install json&lt;/code&gt;. Finally, you want Bundler - &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt;! This gem allows us to bundle all of your gems together for your application to use.&lt;/p&gt;

&lt;p&gt;You need somewhere to store all of the Gems that your application needs - this will be a plaintext file called &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; (no extension). Gemfiles are where you store information about our application’s libraries (aka, gems). Essentially, the Gemfile allows us to specify what gems we want our application to use.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Gemfile&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://rubygems.org'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sinatra'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'json'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Each time the Gemfile had new Gems added to it, you need to &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt;. Yes, &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; from terminal in the folder where your app lives. Bundler will then grab all the gems and bundle them together for your app. If you add additional gems, don’t forget to &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt;!&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;configuraiton-with-configru&quot;&gt;2. Configuraiton with Config.ru&lt;/h4&gt;

&lt;p&gt;You now need a file to tell our application how it should be configured. This tells you what we need to do and what settings your app should use. Since you’re using Sinatra, this will be pretty simple! Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;config.ru&lt;/code&gt; in the same directory as your &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;config.ru&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./app'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What was going on in that file? You required the &lt;code class=&quot;highlighter-rouge&quot;&gt;app.rb&lt;/code&gt; file to be used by using Ruby’s &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; statement. This forces a file to be loaded once into our application and run. You then &lt;code class=&quot;highlighter-rouge&quot;&gt;run Sinatra::Application&lt;/code&gt; - or tell Sinatra to start. That’s it!&lt;/p&gt;

&lt;h4 id=&quot;communicating-with-the-web&quot;&gt;3. Communicating with the Web&lt;/h4&gt;

&lt;p&gt;Now we’re going to create one more final - our &lt;code class=&quot;highlighter-rouge&quot;&gt;app.rb&lt;/code&gt;. Our final app.rb will look like this.. but we’re going to build it and explain as we go.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler'&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First, In your &lt;code class=&quot;highlighter-rouge&quot;&gt;app.rb&lt;/code&gt; file, you now need to to require Bundler. It is what bundles your gems.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app.rb&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler'&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, you need to let users access resources on your server. But how will you tell them where to go? Sinatra provides &lt;strong&gt;Routers&lt;/strong&gt;. These route the user to http://somedomain.com/route/. Or maybe http://somewhere.com/landing/. You’ll define a root route first to access http://localhost/. If this were on a live server, it could be http://somedomain.com/&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app.rb&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler'&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# some code goes here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that you can have a user access a resource via a route. It is time to expose a resource to them! You’ll use the JSON gem here to return a Hash back to a user as JSON.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app.rb&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler'&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello, world!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;did-this-work-lets-run-your-server&quot;&gt;4. Did this work? Let’s run your server!&lt;/h4&gt;

&lt;p&gt;In terminal, run your app. Did you add any new gems? If so, &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt;! Now, let’s start our server&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Note&lt;/em&gt; This tells the &lt;strong&gt;Rackup&lt;/strong&gt; middleware to run our server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rackup
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If everything went to plan, you can view your resource. Sinatra listens for requests on port &lt;strong&gt;9292&lt;/strong&gt;. Browse to your resource at http://localhost:9292/. Hopefully everything worked out and you’ll see &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;5. Conclusion&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;You just build a webserver! Congrats! Hopefully this feels awesome and you want to learn more.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Next Steps&lt;/strong&gt;: Take a look at the official documentation - http://www.sinatrarb.com/&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 25 Jun 2015 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/first-sinatra-server</link>
        <guid isPermaLink="true">http://localhost:4000/first-sinatra-server</guid>
        
        
      </item>
    
      <item>
        <title>To the stars: Solar Systems beyond our own</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Originally Published October, 2014. Last updated 1/28/2016.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Abstract&lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Introduction&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;The discovery of new planet types&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;The composition of other star systems&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Planets within their star’s habitable zone and the possibility of liquid water&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;Conclusion&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;References&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;abstract&quot;&gt;Abstract&lt;/h4&gt;

&lt;p&gt;In this essay, we present information about planets found outside of our own solar system. Our research touches on types of planets found, new types of solar system compositions that we have discovered. We also discuss planets that have been found that could contain liquid water. This essay’s aim is to expand upon our current knowledge of extrasolar planets (planets found outside of our solar system). Through space programs such as the Kepler program, we are able to find alien worlds and survey them. In the past two decades alone, scientists have been able to discovery over one hundred planets orbiting other stars.&lt;/p&gt;

&lt;h4 id=&quot;introduction&quot;&gt;1. Introduction&lt;/h4&gt;

&lt;p&gt;As the late Carl Sagan (1980) once said, “the surface of the Earth is the shore of the cosmic ocean”. In the past two decades, pioneers in the space sciences community have been looking beyond our own galactic home – to view into other solar systems in a search for other planets.  Research suggests that a variety of unfamiliar exoplanet types and solar systems will likely be discovered due to recent discoveries of new planet types, the identification of unexpected planets orbiting unlikely host stars, and newly found planets that orbit in other solar system’s habitable zones. The findings of scientists have been fantastic, once unimaginable planets and solar systems. They have found worlds that orbit closer to their stars than Mercury orbits our own sol. We have found rocky planets larger than any in our own solar system. We have even found possible hope for finding life outside of our solar system by finding planets where liquid water theoretically could exist.&lt;/p&gt;

&lt;h4 id=&quot;the-discovery-of-new-planet-types&quot;&gt;2. The discovery of new planet types&lt;/h4&gt;

&lt;p&gt;Scientists have often wondered if planets are common in the universe;. Until the 1980s, our telescopes were not capable of detecting extrasolar planets. Exoplanets – planets that are beyond our solar system – are detected by measuring the light from a remote star. As a planet orbits (transits) around their host star, its gravity “tugs” on the star. Scientists then record stars for a long period of time (months to years) through a telescope. Next, we analyze the data that we record; this allows us to detect repeating gravitational anomalies that a planet exerts on a star. Each time an anomaly is detected it is representative of one orbit.&lt;/p&gt;

&lt;p&gt;Our solar system is composed of eight planets – two Jovian gas giants (the gas giants Jupiter and Saturn), four rocky worlds (Mercury, Venus, Earth, and Mars), and two ice giants (Neptune and Uranus). Before we discovered exoplanets scientists were unsure if planets regularly formed around other stars. To our surprise, we have discovered hundreds of planets in just two decades worth of research. We were also unsure of what to results expect; many types of planets were theorized. Based on the results of scanning the night skies, the planets types that we have found are amazing. Scientists have discovered a variety of new planet types in the current sample (which contains 140 known exoplanets).&lt;/p&gt;

&lt;p&gt;Out of the planet types we have found in our samples pool, we are starting to find enough that it is possible to begin categorizing them. Klahr. et al (2002) make a statement regarding the new types of planets we have discovered: “with more than 140 exoplanets known to date, some very interesting trends have already drawn attention in the past few years,” (p 132). Based on our observations, we have discovered that there are Chthonian  planets (theorized to be the eroded core of gas giants), super Earths (rocky worlds with up to four times the mass of our own Earth), and “hot Jupiters” (gas giants that have a higher surface temperature than Saturn or Jupiter.&lt;/p&gt;

&lt;p&gt;So called “Hot Jupiters” (also known as epistellar Jovians) seem to be abundant when searching for exoplanets. This could be attributed to the fact that they have such strong gravity that they remain within close orbit of their parent star. It could also due to a sampling bias – we do not yet have technology that could easily allows for us to find planets further from their parent stars (this should change with the upcoming launch of the James Webb Telescope). Regardless, we have found planets that orbit close enough to their stars that their atmospheres are nearly evaporating. Chthonian planets are theorized to be the remnants of these planets. Cole (2006) points out that data from NASA’s Spitzer Telescope has verified the existence of “hot Jupiters” and that “measurements confirm that each planet is indeed a hot Jupiter with surface temperatures of the order of 1,000 K” (p370).&lt;/p&gt;

&lt;p&gt;It is believed that gas giants are common throughout the universe based on the sample data from our experiments. “For now, however, all that can be said is that bloated planets are not that unusual (Bakos, 2007)”. After sorting through our available data, many planets with one and a half times the radius of Earth (or more) appear to become gas giants. Based on our data it is theorized that any planet beyond that range forms into a gas giant. As Weiss et al note, “above 1.5 R (Earth), the average planet density rapidly decreases with increasing radius, indicating that these planets have a large fraction of volatiles (Weiss et al, 2014)”. There is good news for Earth-like planets, however. We have found what we suspect to be a multi-planet system orbiting around the star Gliese 581. Gliese 581d is notable in that as a planet, “Gliese 581d, can be considered the first confirmed exoplanet that could support Earth-like life, according to a team of scientists in France (CNRS, 2011).&lt;/p&gt;

&lt;h4 id=&quot;the-composition-of-other-star-systems&quot;&gt;3. The composition of other star systems&lt;/h4&gt;

&lt;p&gt;Many planets have been found orbiting host stars that we did not expect to be capable of containing planets. These solar systems are nothing like our own. Imagine a solar system where the only rocky planetoids orbit enormous gas giants. Our closest galactic neighbor – Alpha Centauri – is a binary star system with an orbiting red dwarf (creating an elongated triad of stars). The system is our closest galactic neighbor, it is still 4.39 light years away. It is hard to imagine how planets would form in such an unstable environment. While our own solar system is neat and organized (all of the planets orbit on near the same elliptical plane in our solar system), others star systems may not be. Extrasolar planetary systems are not mirrors of our own; instead we have found wild, unexpected star systems beyond our home.&lt;/p&gt;

&lt;p&gt;With the “recent discovery of a planetary system with five Neptune-mass planets, as well as others including one mass of about 1.4 times that of Earth,” we are now able to fully realize how different alien solar systems are compared to our own (Committee on the Planetary Science Decadal Survey, 2003, p.175). We have found other planets similar in size to Venus and Earth; however they aren’t likely lush, watery worlds like our own planet.  Some of them appear to have unstable planetary orbits, others orbit too close to their parent star to support life as we know it.  Even though the Alpha Centauri contains “the first planet with a mass similar to Earth ever found around a star like the sun (Dumusque et al, 2012),” don’t get too excited: it is orbiting closer to its own star than Mercury is to our sun!&lt;/p&gt;

&lt;p&gt;There are a few star systems that do look like our own. We have found similar planets to our own in configurations similar to our own solar system. Crowell points out it is possible that there are solar systems like ours; in fact “…similar to our own is Epsilon Eridani,” as it contains a Jupiter sized gas giant (Crowell, 2007). Unfortunately, smaller planets are harder to detect around their stars because of the smaller gravitational “tug” that they exert on their parent stars. It is difficult for current generation telescopes to detect planets further away from their stars. This currently limits us to what we can see; there could be entire worlds that we are missing in our surveys of other stars. Based on the small sample size that we have, it is likely that we will still find solar systems that continue to defy our expectations. Consider that “Kepler observed just 0.28 percent of the sky and the telescope was able to peer out to only 3000 light years away, studying less than 5 percent of the stars in its field of view (Becker, 2013)”.&lt;/p&gt;

&lt;h4 id=&quot;planets-within-their-stars-habitable-zone-and-the-possibility-of-liquid-water&quot;&gt;4. Planets within their star’s habitable zone and the possibility of liquid water&lt;/h4&gt;

&lt;p&gt;Even when we discover rocky worlds (planets that might be as small as Mercury to planets with 4 times the mass as Earth) they may not have suitable conditions for life as we know it. That life requires liquid water; for liquid water to exist on the surface of a planet, the planet must orbit close enough to the star to maintain liquid water on the surface of the planet. If you look at our own solar system, Mercury and the Moon both have ice in craters that sunlight never reaches that is locked away inside of ice. Mars’ northern ice cap is composed of liquid water (the southern ice cap contains dry ice). Europa and Enceladus – moons of the great Jovian planets in our solar system – have plumes of water jetting from their frozen surfaces into space; water is trapped underneath ice on these worlds and is spraying into space through what could be oceanic vents.&lt;/p&gt;

&lt;p&gt;It is easy to classify types of worlds that could be habitable based on the planets found in our own solar system. There are “garden worlds” – worlds capable of maintaining liquid water on their surface at all times (like Earth). Ocean worlds are another possibility – worlds where either surface water freezes and allows for seas below the surface (such as Europa and Enceladus). There are finally barren worlds – worlds that could hold liquid water given certain conditions (and where it is found in ice) like Mars.&lt;/p&gt;

&lt;p&gt;In our search for planets in other solar systems, we have found a handful that theoretically could be capable of maintaining liquid water due to their orbits resting within their host star’s habitable zones. First, there are planets like Mars – planets that under the right conditions could host liquid water. They might require a thicker atmosphere, plate tectonics, or even a stable orbit – but it is possible based on our observations that they could harbor liquid water. This is important if we want to find life (or to find a suitable planet to migrate to in the future of our species). We have also found planets that could be similar to our own Earth if geological conditions are right. “The geophysics of GJ581d is unknown, but if a similar mechanism were present there, its atmospheric CO2 would stabilize above the level needed to maintain a liquid water cycle by negative feedback (Wordsworth, 2011)”.&lt;/p&gt;

&lt;p&gt;It is also possible that planets may only have a window where they can support liquid water. Perhaps as their star begins to heat up and expand, the planet begins drying up and the water on the world evaporates away. Or perhaps the gravitational tug of another planet displaces it further away from its star, freezing its surface. Based on these possibilities, it is possible that some planets in their habitable zones may have a shorter life span than our own Earth’s for liquid water (and life) to exist. “Compared to larger and more massive CO2-rich planets which may evolve to class II type habitable planets, smaller size planets like Mars cool down faster and water may condense earlier compared to an Earth-size and mass planet (Lammer, 2009)”.  Looking at our own solar system, it is theorized that Venus may have once had liquid water (as it is in Sol, our star’s, habitable zone). Some speculate that it evaporated and caused the runaway greenhouse effect that is evident today.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;5. Conclusion&lt;/h4&gt;

&lt;p&gt;In just a few decades, the science community has gone from knowing nothing about extrasolar planets to realizing how abundant planets are in our own galaxy. We have found that there are solar systems that contain more ice giants (like Neptune and Uranus) than our own. We know that there are planets as large as Jupiter orbiting so close to their host stars that their atmospheres are close to evaporating away. We even know that there is a chance that a few planets could support liquid water – a requirement for the only known types of life in the universe. Our research into the unknown has allowed us to find solar systems that are nothing like our own, planets that orbit within their star’s habitable zones, and discovered planet types that we never knew existed. As scientific techniques (and technology) improve over the years to come, we are sure to find even more amazing things in other star systems.&lt;/p&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;

&lt;p&gt;Sagan, Carl (1980). Cosmos. Random House. ISBN 978-0-375-50832-5, 2002.&lt;/p&gt;

&lt;p&gt;Cole, George H. A. (2006). Wandering Stars: About Planets and Exo-Planets : An 
Introductory Notebook. London, GBR: Imperial College Press, 2006.&lt;/p&gt;

&lt;p&gt;Klahr, Hubert, Brandner, Wolfgang, Jakosky, Bruce. Planet Formation: Observations, Experiments, and Theory. West Nyack, NY: Cambridge University Press, 2002.&lt;/p&gt;

&lt;p&gt;Committee on the Planetary Science Decadal Survey. Vision and Voyages for Planetary Science in the Decade 2013-2022. Washington, DC: National Academies Press, 2003.&lt;/p&gt;

&lt;p&gt;CNRS (Délégation Paris Michel-Ange). (2011, May 16). First habitable exoplanet? Climate simulation reveals new candidate that could support Earth-like life. ScienceDaily. Retrieved August 26, 2014 from www.sciencedaily.com/releases/2011/05/110516080124.htm&lt;/p&gt;

&lt;p&gt;Dumusque, X., Pepe, F., Lovis, C., Ségransan, D., Sahlmann, J., Benz, W., Bouchy, F., Mayor, M., Queloz, D., Santos, N., Udry, S. (2012, October 17). An Earth-mass planet orbiting α Centauri B. Nature, 491.&lt;/p&gt;

&lt;p&gt;Crowell, Lawrence B. Can Star Systems Be Explored? The Physics of Star Probes. River Edge, NJ: World Scientific, 2007.&lt;/p&gt;

&lt;p&gt;Weiss, Lauren M. and Marcy, Geoffrey W. The Mass-Radius Relation for 65 Exoplanets Smaller than 4 Earth Radii. The Astrophysics Journal (Feburary 2014).&lt;/p&gt;

&lt;p&gt;Becker, Adam (2013, September 25). How Many Earths? New Scientist. Retrieved on February 24th, 2014 from http://exoplanets.newscientistapps.com.&lt;/p&gt;

&lt;p&gt;Bakos, G. A. et al (2007). HAT-P-1b: A Large-Radius, Low Density Exoplanet Transiting One Member of a Stellar Binary. The Astrophysical Journal vol. 656.&lt;/p&gt;

&lt;p&gt;Wordsworth, Robin D. et al (2011). Gliese 581d is the First Discovered Terrestrial-Mass Exoplanet in the Habitable Zone. The Astrophysical Journal vol 733.&lt;/p&gt;

&lt;p&gt;Lammer, H. et al (2009). What makes a planet habitable? Astronomy and Astrophysics Review, vol. 17.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Oct 2014 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/to-the-stars-solar-systems</link>
        <guid isPermaLink="true">http://localhost:4000/to-the-stars-solar-systems</guid>
        
        
      </item>
    
      <item>
        <title>Review Visual Studio 2013 Cookbook</title>
        <description>&lt;p&gt;Visual Studio has made a significant amount of changes in 2010 and 2012; 2013 is no different. Learning all of the new features from version to version isn’t always straightforward. It can also be a daunting task to learn the IDE in and out for new users. &lt;a href=&quot;http://www.packtpub.com/visual-studio-2013-cookbook/book&quot;&gt;Visual Studio 2013 Cookbook&lt;/a&gt; by Jeff Martin and Richard Banks is a great bridge to new users and experienced users alike to the features of Visual Studio’s latest release, 2013. Don’t be fooled by the name - the book also covers ASP.NET MVC5, Windows Store Apps, Async code, and .NET Platform 4.5.1.&lt;/p&gt;

&lt;p&gt;I primarily focus on the web development aspect of ASP.NET (MVC, Web API) and this book’s coverage of the platform’s latest technology is great. It covers MVC5 fairly well - from getting started to the base template changes with Bootstrap. It also covers Microsoft’s support for viewing your page in multiple browsers (hooray). There is also a solid introduction to HTML5/CSS3 as well as how to use Javascript Intellisense (yay). There’s also a solid overview of the System.Web.Optimization framework (Bundling and Minification). The introduction to TypeScript is great (mainly because TypeScript is awesome - writing ES6 strictly typed code that compiles into Javascript).&lt;/p&gt;

&lt;p&gt;Two chapters that really stood out were the ones that covered how to use the Visual Studio debugger (this is great for new developers) and Team Foundation Server. Knowing how to use the debugging tools in Visual Studio gives you complete insight into bug-fixing and is in my opinion one of the most important tools a developer can have. In regards to the TFS coverage, I’ve used Subversion and Git in the past but recently began to use TFS. The tutorials had me up to speed in no time using TFS (even though I still prefer Git as my choice of source control).&lt;/p&gt;

&lt;p&gt;The Windows Store tutorials will get you started on Microsoft’s modern UI in no time; if you’re interested in designing tablet/Windows Phone apps, you’ll be pleasantly surprised. The chapters covering the new platform changes with ASP.NET are solid, also (such as the C# Async code examples). For those of you who develop Python on Windows (or are curious), there is a great introduction to IronPython.&lt;/p&gt;

&lt;p&gt;So, here is my verdict: this is the Visual Studio book that I wish I had available when I started programming using Visual Studio. The topics covered are better written than the Microsoft examples, the screenshots and figures are easy to read, and the amount of topics covered introduce you to new concepts and features in the Microsoft ecosystem. It also serves as a nice upgrade guide to users who may be using Web Forms, Windows Forms, and older versions of ASP.NET MVC. If you have recently upgraded from Visual Studio 2010 or older (and even 2012), this book will help you get accustomed to the new tools available to you.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Jul 2014 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/Review-Visual-Studio-2013-Cookbook</link>
        <guid isPermaLink="true">http://localhost:4000/Review-Visual-Studio-2013-Cookbook</guid>
        
        
      </item>
    
      <item>
        <title>Binding parameters to Web API controller with Backbone.js</title>
        <description>&lt;p&gt;This is a really quick write-up of an issue that isn’t well documented. One of our work related projects uses Backbone.js on the front end to handle models and collections and is powered by ASP.NET Web API 2.0. I ran into an issue regarding using the built in model functions &lt;strong&gt;.save()&lt;/strong&gt; and &lt;strong&gt;.fetch()&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I found that to pass parameters in (either from a model or somewhere else) when making a &lt;strong&gt;GET&lt;/strong&gt; request (such as the &lt;strong&gt;model.fetch()&lt;/strong&gt; method) to the controller, you needed to declare the model/parameter with the &lt;strong&gt;[FromUri]&lt;/strong&gt; attribute. Example:&lt;/p&gt;
&lt;pre&gt;public testSampleModel Get([FromUri]testSampleModel  model) { ... }&lt;/pre&gt;
&lt;p&gt;How to send in a parameter on a &lt;strong&gt;.fetch()&lt;/strong&gt;? Good question - here’s the answer (using jQuery):&lt;/p&gt;
&lt;pre&gt;myModel.fetch({ data: $.param({ paramName: &quot;foobar&quot;}) });&lt;/pre&gt;
&lt;p&gt;To pass parameters/model when making a POST request (such as model.save()), I found that you must declare the model/parameter as either [FromBody] or without an attribute at all. Example:&lt;/p&gt;
&lt;pre&gt;public testSampleModel Get([FromBody]testSampleModel  model) { ... }&lt;/pre&gt;
&lt;p&gt;That’s it - just a quick, informative post.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Jun 2014 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/Binding-parameters-to-Web-API-controllers-with-Backbone.js</link>
        <guid isPermaLink="true">http://localhost:4000/Binding-parameters-to-Web-API-controllers-with-Backbone.js</guid>
        
        
      </item>
    
      <item>
        <title>Setting up AngularJS, Jasmine, and Karma in Visual Studio</title>
        <description>&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;I’ve recently been tasked to research &lt;strong&gt;AngularJS&lt;/strong&gt; to use on top of Visual Studio. After reading the official tutorial, unofficial tutorials, and Manning’s early access &lt;strong&gt;AngularJS in Action &lt;/strong&gt;and &lt;strong&gt;Getting MEAN &lt;/strong&gt;(which stands for mongoDB/Express/AngularJS/Node.js), I found that there are too few guides for Windows users. If you’re like me, you probably are running into issues installing and running &lt;strong&gt;karma&lt;/strong&gt;, would like to run Javascript tests in the convenience of the Test Explorer (or Resharper), and want to let NuGet handle all of your package updating (bower is great, but not for .NET environments). Well, this tutorial is here to help! We’ll get you up and running with AngularJS, Jasmine, and Karma.&lt;/p&gt;

&lt;p&gt;All of this has been setup/tested on:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Windows 8.1 x64 Pro&lt;/li&gt;
	&lt;li&gt;Visual Studio 2013 Professional&lt;/li&gt;
	&lt;li&gt;Google Chrome&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Getting Started&lt;/h4&gt;
&lt;p&gt;Go ahead and install the following software:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; (Windows installer) - &lt;em&gt;install everything!&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://visualstudiogallery.msdn.microsoft.com/f8741f04-bae4-4900-81c7-7c9bfb9ed1fe&quot;&gt;Chutzpah Test Adapter for Visual Studio&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://visualstudiogallery.msdn.microsoft.com/71a4e9bd-f660-448f-bd92-f5a65d39b7f0&quot;&gt;Chutzpah Test Runner Context Menu for Visual Studio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once all of that is setup it is time to set up our project environment. Go ahead and create a new Visual Studio project - you can choose any project you wish; this tutorial will use ASP.NET MVC 5 (by selecting ASP.NET Web Application). &lt;strong&gt;Select MVC&lt;/strong&gt;  and &lt;strong&gt;Add unit tests&lt;/strong&gt;. We’re going to use a traditional view to power our SPA (though, you could easily create a Web API project instead - just make sure that you set your routes up to point to an index.html page instead of an ASPX/Razor view).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://codeforcoffee.org/wp-content/uploads/2014/04/angular.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-162 size-medium&quot; src=&quot;http://codeforcoffee.org/wp-content/uploads/2014/04/angular-300x211.png&quot; alt=&quot;Visual Studio project screen&quot; width=&quot;300&quot; height=&quot;211&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we need to grab a few Javascript libraries from (hint: if you prefer, you can grab these from NuGet): &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; (I recommend grabbing the entire ZIP that includes all libraries) and &lt;a href=&quot;https://github.com/pivotal/jasmine&quot;&gt;Jasmine&lt;/a&gt; (you can use another testing framework if you prefer but the official AngularJS examples/tutorials use Jasmine).&lt;/p&gt;

&lt;p&gt;Okay - you have all of the tools either installed (or about to be).&lt;/p&gt;
&lt;h4&gt;Setting up the project folder&lt;/h4&gt;
&lt;p&gt;You should have two projects: Your ASP.NET MVC/Web API project and your Tests project. Inside of the ASP.NET project, we’re going to add the following folders: &lt;strong&gt;ng-views&lt;/strong&gt; and &lt;strong&gt;ng-scripts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The ng-views folder will contain all of your Angular-specific views. The ng-scripts folder will contain your controllers, models, directives, and so forth. In the &lt;strong&gt;Tests&lt;/strong&gt; project, create an &lt;strong&gt;ng-tests&lt;/strong&gt; project. &lt;em&gt;If you installed Angular and Jasmine via NuGet you should be able to skip to the next paragraph. &lt;/em&gt;Now, extract your AngularJS archive and copy &lt;strong&gt;all &lt;/strong&gt;of the scripts to the ~/&lt;strong&gt;Scripts/Angular/&lt;/strong&gt; folder (you’ll need to create the subfolder). Unarchive Jasmine and copy the contents of the &lt;strong&gt;lib&lt;/strong&gt; folder to &lt;strong&gt;~/Scripts/Jasmine/&lt;/strong&gt;. You’ll need to update your &lt;strong&gt;/App_Start/BundleConfig.cs&lt;/strong&gt; file - do that now by adding the following lines to the RegisterBundles method:&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot; style=&quot;color: #222222;&quot;&gt;&lt;span class=&quot;pln&quot; style=&quot;color: #000000;&quot;&gt;bundles&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;color: #000000;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;color: #2b91af;&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;color: #000000;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;color: #2b91af;&quot;&gt;ScriptBundle&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;color: #000000;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;str&quot; style=&quot;color: #a31515;&quot;&gt;&quot;~/Scripts/Angular&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;color: #000000;&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;color: #2b91af;&quot;&gt;IncludeDirectory&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;color: #000000;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;str&quot; style=&quot;color: #a31515;&quot;&gt;&quot;~/Scripts/Angular&quot;,&quot;*.js&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot; style=&quot;color: #000000;&quot;&gt;));
&lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot; style=&quot;color: #222222;&quot;&gt;&lt;span class=&quot;pln&quot;&gt;bundles&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;color: #2b91af;&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot; style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;color: #2b91af;&quot;&gt;ScriptBundle&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;str&quot; style=&quot;color: #a31515;&quot;&gt;&quot;~/Scripts/Jasmine&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;typ&quot; style=&quot;color: #2b91af;&quot;&gt;IncludeDirectory&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;str&quot; style=&quot;color: #a31515;&quot;&gt;&quot;~/Scripts/Jasmine&quot;,&quot;*.js&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;));&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Go ahead and right click on the ng-tests folder - you’ll notice that you can run tests using Chutzpah from the context menu - one will load tests into the Test Explorer and the other option will load a static browser instance version of Jasmine.&lt;/p&gt;

&lt;p&gt;Finally, if you love IntelliSense (who doesn’t), you’ll want to create a &lt;strong&gt;_references.js&lt;/strong&gt; script in both your ASP.NET project and your Test project. Create a blank Javascript file in both projects, select &lt;strong&gt;all&lt;/strong&gt; of your Javascript files, and drag/drop them into both blank files (or you can also build out the file yourself - up to you). Your _references.js file should look like:&lt;/p&gt;
&lt;pre&gt;/// &amp;lt;reference path=&quot;modernizr-2.6.2.js&quot; /&amp;gt;
/// &amp;lt;reference path=&quot;jquery-1.10.2.js&quot; /&amp;gt;
/// &amp;lt;reference path=&quot;bootstrap.js&quot; /&amp;gt;
/// &amp;lt;reference path=&quot;respond.js&quot; /&amp;gt;
/// &amp;lt;reference path=&quot;jquery.validate.js&quot; /&amp;gt;
/// &amp;lt;reference path=&quot;jquery.validate.unobtrusive.js&quot; /&amp;gt;
/// &amp;lt;reference path=&quot;../Scripts/angular.js&quot; /&amp;gt;
/// etc..&lt;/pre&gt;
&lt;p&gt;Now, with any new Javascript file you create, do the same thing with just the &lt;strong&gt;_references.js&lt;/strong&gt; file to first line of every project. Go ahead and create some baseline files for you &lt;strong&gt;ng-scripts&lt;/strong&gt; and &lt;strong&gt;ng-tests&lt;/strong&gt;; something like the following will do (this will assist in the next step) - if the code you see is foreign to you don’t fret, any tutorial (links to some at the end of this post) will explain them later:&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;/TestProject/ng-tests/MainCtrlSpec.js&lt;/strong&gt;:&lt;/p&gt;
&lt;pre id=&quot;LC1&quot; class=&quot;line&quot;&gt;describe('Controller: MainCtrl', function() {
    beforeEach(module('MyApp'));
    var MainCtrl, scope;
    beforeEach(inject(function($controller) {
        scope = {};
        MainCtrl = $controller('MainCtrl', {
            $scope: scope
        });
    }));
    it('should have scope defined', function () {
        expect(scope).toBeDefined();
    });
});&lt;/pre&gt;
&lt;p class=&quot;line&quot;&gt;In &lt;strong&gt;/ASPNETProject/ng-scripts/MainCtrl.js&lt;/strong&gt;:&lt;/p&gt;

&lt;pre class=&quot;line&quot;&gt;var myModule = angular.module('MyApp', []);
myModule.controller('MainCtrl', ['$scope',
 function ($scope) {
 // I'm a lonely controller :(
 }
]);&lt;/pre&gt;
&lt;p class=&quot;line&quot;&gt;Okay, so now we have everything in Visual Studio up ready for AngularJS. Now, on to the fun part.&lt;/p&gt;

&lt;h4&gt;Installing Karma on Windows&lt;/h4&gt;
&lt;p&gt;Now, we need to install Karma (which is used for end-to-end/integration testing). To do this, open up the DOS prompt (as an adminstrator). Browse to the base of your project directory (where both of your projects are located). Now, run the following commands:&lt;/p&gt;
&lt;pre&gt;npm install -g karma
npm install -g karma-cli&lt;/pre&gt;
&lt;p&gt;This will install Karma to your global PATH (so you can access it anywhere on the OS - such as in other projects and so forth). Now, you need to configure Karma for your project. To do so, just type in:&lt;/p&gt;
&lt;pre&gt;karma init&lt;/pre&gt;
&lt;p&gt;You’ll now be prompted to select your testing framework (Jasmine is the default), if you’d like to install Require.js (no is the default), which browser to run the tests in (Chrome is the default), the location of your scripts (see the example below - you’ll want to point them to the &lt;strong&gt;/ng-scripts/&lt;/strong&gt; and &lt;strong&gt;/ng-tests/&lt;/strong&gt; folder while selecting all Javascript files (&lt;strong&gt;**.js&lt;/strong&gt;), the location/file types to exclude (empty by default), and if you’d like Karma to actively watch for changes to your files (yes!) so it can re-run them as needed. Your command line output should look like:&lt;/p&gt;
&lt;pre&gt;Which testing framework do you want to use ?
Press tab to list possible options. Enter to move to the next question.
&amp;gt; &lt;strong&gt;jasmine&lt;/strong&gt;
Do you want to use Require.js ?
This will add Require.js plugin.
Press tab to list possible options. Enter to move to the next question.
&amp;gt; &lt;strong&gt;no&lt;/strong&gt;
Do you want to capture any browsers automatically ?
Press tab to list possible options. Enter empty string to move to the next question.
&amp;gt; &lt;strong&gt;Chrome&lt;/strong&gt;
&amp;gt;
What is the location of your source and test files ?
You can use glob patterns, eg. &quot;js/*.js&quot; or &quot;test/**/*Spec.js&quot;.
Enter empty string to move to the next question.
&amp;gt; &lt;strong&gt;AngularJumpstart/ng-scripts/**.js&lt;/strong&gt;
&amp;gt; &lt;strong&gt;AngularJumpstart.Tests/ng-tests/**.js&lt;/strong&gt;
Should any of the files included by the previous patterns be excluded ?
You can use glob patterns, eg. &quot;**/*.swp&quot;.
Enter empty string to move to the next question.
&amp;gt;
Do you want Karma to watch all the files and run the tests on change ?
Press tab to list possible options.
&amp;gt; &lt;strong&gt;yes&lt;/strong&gt;
Config file generated at &quot;../path/to/your/project/karma.conf.js&quot;.&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you don’t have valid Javascript files in the ng-scripts and ng-tests folders, you’ll get an error when trying to create the config file. Make sure you have at least an empty js file in each folder.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, before moving on we need to make sure that Angular is references in the &lt;strong&gt;karma.conf.js&lt;/strong&gt; file. Open it up and make sure that &lt;strong&gt;angular.js&lt;/strong&gt; and &lt;strong&gt;angular-mock.js&lt;/strong&gt; are included (you may need to add other files as time goes on, too). Look for the &lt;strong&gt;files&lt;/strong&gt; array:&lt;/p&gt;
&lt;pre id=&quot;LC16&quot; class=&quot;line&quot;&gt;// list of files / patterns to load in the browser
    files: [
      'AngularJumpstart/Scripts/Angular/angular.js',
      'AngularJumpstart/Scripts/Angular/angular-mocks.js',
      'AngularJumpstart/ng-scripts/**.js',
      'AngularJumpstart.Tests/ng-tests/**.js'
    ],&lt;/pre&gt;
&lt;p&gt;Once you’ve saved that, all you need to do is run karma:&lt;/p&gt;
&lt;pre&gt;karma start&lt;/pre&gt;
&lt;p&gt;You’ll see the application initialize and an instance of your browser run. Every time you change any of the files that Karma is monitoring the tests will re-run (and show if they’re successful or if they fail). If you’d like to familiarize yourself with how Karma configurations work, please view the &lt;a href=&quot;http://karma-runner.github.io/0.8/intro/configuration.html&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Wrap-Up&lt;/h4&gt;
&lt;p&gt;Well, now you have everything set up to start your AngularJS project. If you’re new to the AngularJS world, here are a few places to get started:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://docs.angularjs.org/tutorial&quot;&gt;Official AngularJS Tutorial&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.syncfusion.com/resources/techportal/ebooks/angularjs&quot;&gt;AngularJS Succinctly&lt;/a&gt; (a great pocket-reference sort of guide)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.manning.com/bford/&quot;&gt;AngularJS in Action&lt;/a&gt; (pre-release book)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you see any errors feel free to comment and I’ll take care of them. Thanks for reading!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;pre&gt;&lt;/pre&gt;
&lt;div id=&quot;LC1&quot; class=&quot;line&quot;&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 24 Apr 2014 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/Setting-Up-Angular-JS-Jasmine-and-Karma-in-Visual-Studio</link>
        <guid isPermaLink="true">http://localhost:4000/Setting-Up-Angular-JS-Jasmine-and-Karma-in-Visual-Studio</guid>
        
        
      </item>
    
      <item>
        <title>ASP.NET MVC: Intro to MVC Binding JSON objects to Models</title>
        <description>&lt;p&gt;This post is designed to assist in jump-starting your MVC (model-view-control) project binding JSON to models (using Ajax posts). I feel that this is a vital skill to any journeyman ASP.NET MVC developer. The sample project (available on &lt;a href=&quot;https://github.com/code-for-coffee/mvcBindingJson&quot;&gt;Github&lt;/a&gt;) has been tested in Visual Studio 2012 and Xamarin on OS X.&lt;/p&gt;

&lt;p&gt;If you’re new to MVC, here is a brief explanation: this design pattern is designed to keep your code into specific parts dedicated for specific usage. Models are designed to represent your data objects. The controller works with/manipulates models (backend, server side code). It then generates a View (rendered HTML) that is presented to the user on their web browser. The Model and Controller are written in C# for this project. The View is rendered in pure HTML with Javascript.&lt;/p&gt;

&lt;p&gt;This tutorial will walk you through creating a project from start to finish. You’ll also be introduced to a cast of squirrels (such as &lt;a href=&quot;https://twitter.com/acommonsquirrel&quot;&gt;@acommonsquirrel&lt;/a&gt; and &lt;a href=&quot;http://illwillpress.com/vault.html&quot;&gt;Foamy the Squirrel&lt;/a&gt;). To get started, create a new MVC project and call it “&lt;strong&gt;bindingJSON&lt;/strong&gt;” (using the standard, no authentication). Now, inspect the object you need to model. Using an object oriented approach, how would you create your item? We’ll use a common squirrel as our object; so, create a new Model in your ASP.NET project called “&lt;strong&gt;Squirrel.cs&lt;/strong&gt;”. A squirrel has a few properties, such as:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;age&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;acorns&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;gender&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;hobby&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, inside of your model you’ll have the following class:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;using System;&lt;/pre&gt;
&lt;pre&gt;namespace bindingJSON
{
 public class Squirrel
 {
 public string Name { get; set; }
 public int? Age { get; set; } // squirrels aren't required tell us their age
 public int Acorns { get; set; }
 public char Gender { get; set; }
 public string Hobby { get; set; }
 }
}&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, we’ll build out a simple controller. This controller will contain an ActionResult and a JsonResult method. This will be our “&lt;strong&gt;HomeController.cs&lt;/strong&gt;”. The thing to note is the use of the JsonResult. A JsonResult allows you receive an &lt;strong&gt;XmlHttpRequest&lt;/strong&gt; (in Javascript) that will send JSON objects. You can send any object you want; we’re going to expect a &lt;strong&gt;Squirrel&lt;/strong&gt; - incomingSquirrel. It’ll call a private function (just an example of what you can do with the object).&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;&lt;/pre&gt;
&lt;pre&gt;namespace bindingJSON.Controllers
{
 public class HomeController : Controller
 {
 public ActionResult Index()
 {
 // Initial View
 return View();
 }&lt;/pre&gt;
&lt;pre&gt;[HttpPost]
 public JsonResult PostSquirrel(Squirrel incomingSquirrel)
 {
 string status = null;
 try { 
 saveSquirrel(incomingSquirrel);
 status = &quot;If you don't see this, something went wrong.&quot;;
 } catch (Exception e) {
 status = e;
 }
 return Json(status);
 }&lt;/pre&gt;
&lt;pre&gt;#region privateHelpers
 private Boolean saveSquirrel(Squirrel incomingSquirrel) 
 {
 return false;
 }
 #endregion
 }
}&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Okay, so we have the model and controller built out. Now, we need to put together our view. We’ll call it “&lt;strong&gt;Home/Index.cshtml&lt;/strong&gt;”. Inside, we’re going to have just a few small parts. For sake of simplicity, I won’t be using partial views to keep the project small. The view will put together a page that sends form data to the server (using Javascript and the JSONResult in your controller). In the view, we’ll have a simple &lt;strong&gt;$.ajax&lt;/strong&gt; method (via the jQuery library) that fetches the current values of each input, places them into a JSON object, and then sends it to our server. Note that on success of the ajax call you’ll see a message in the error log. If you receive a server error (such as 500) then your model and JSON have errors (such as case sensitivity errors). Also note that you could send a Javascript array of JSON objects and have them bound on the server side using a List&amp;lt;Squirrel&amp;gt;() (ie: public ActionResult HiSquirrels(List&amp;lt;Squirrel&amp;gt; aTonOfSquirrels){}).&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;@model bindingJSON.Squirrel&lt;/pre&gt;
&lt;pre&gt;@{
 Layout = null;
}&lt;/pre&gt;
&lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;Index&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://code.jquery.com/ui/1.10.4/jquery-ui.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
 $(document).ready(function() {
 // when the DOM has fully loaded...
 $(&quot;#btnSubmit&quot;).bind(&quot;click&quot;, function() {
 var onEventLaunchSquirrel = new postSquirrel();
 onEventLaunchSquirrel.launchSquirrel();
 });
 });
 function postSquirrel() {
 this.launchSquirrel = function() {
 
 // fetch values from input
 var name = $(&quot;Name&quot;).val();
 var age = $(&quot;Age&quot;).val();
 var acorns = $(&quot;Acorns&quot;).val();
 var gender = $(&quot;Gender&quot;).val();
 var hobby = $(&quot;Hobby&quot;).val();
 
 // build json object
 var squirrel = {
 Name: name,
 Age: age,
 Acorns: acorns,
 Gender: gender,
 Hobby: hobby
 };&lt;/pre&gt;
&lt;pre&gt;$.ajax({
 type: &quot;POST&quot;,
 url: &quot;home/PostSquirrel&quot;,
 traditional: true,
 contentType: 'application/json; charset=utf-8',
 data: JSON.stringify(squirrel),
 success: function (data) { console.log(data) },
 error: function (data) { console.log(data) } 
 });
 
 }
 }
 
&amp;lt;/script&amp;gt;
&amp;lt;body&amp;gt;&lt;/pre&gt;
&lt;pre&gt;&amp;lt;header&amp;gt;
 &amp;lt;hgroup&amp;gt;
 &amp;lt;h1&amp;gt;oh hey, a squirrel!&amp;lt;/h1&amp;gt;
 &amp;lt;h3&amp;gt;we should interview it!&amp;lt;/h3&amp;gt;
 &amp;lt;/hgroup&amp;gt;
&amp;lt;/header&amp;gt;&lt;/pre&gt;
&lt;pre&gt;&amp;lt;section&amp;gt;
 &amp;lt;p&amp;gt;If the squirrel cooperates, record their information and send it to our server.&amp;lt;/p&amp;gt;
 
 &amp;lt;p&amp;gt;&amp;lt;input type=&quot;text&quot; required=&quot;required&quot; id=&quot;Name&quot; placeholder=&quot;Enter the squirrel's name&quot; /&amp;gt;&amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;&amp;lt;input type=&quot;number&quot; id=&quot;Age&quot; placeholder=&quot;squirrel's age (optional)&quot; /&amp;gt;&amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;&amp;lt;input type=&quot;number&quot; required=&quot;required&quot; id=&quot;Name&quot; placeholder=&quot;How many acorns do they own?&quot; /&amp;gt;&amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;&amp;lt;input type=&quot;number&quot; required=&quot;required&quot; id=&quot;Name&quot; placeholder=&quot;M or F? (single letter only)&quot; size=&quot;1&quot; /&amp;gt;&amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;&amp;lt;input type=&quot;string&quot; required=&quot;required&quot; id=&quot;Hobby&quot; placeholder=&quot;How many acorns do they own?&quot; /&amp;gt;&amp;lt;/p&amp;gt;
 
 &amp;lt;p&amp;gt;&amp;lt;input id=&quot;btnSubmit&quot; type=&quot;button&quot; value=&quot;launch the squirrel through the internet!&quot; /&amp;gt;&amp;lt;/p&amp;gt;
 
 &amp;lt;div id=&quot;status&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/pre&gt;
&lt;pre&gt;&amp;lt;/section&amp;gt;&lt;/pre&gt;
&lt;pre&gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, now you have your full MVC application built (well, sort of). Once you submit the form the JSON object will be send to the JSONResult method on the server side and you can do whatever you need with it.&lt;/p&gt;

&lt;p&gt;That’s it! If you have any questions or spot any errors let me know. If anyone has problems with this working in Visual Studio I’ll put together a project in 2013.&lt;/p&gt;

&lt;p&gt;You can grab the source code here: &lt;a href=&quot;https://github.com/code-for-coffee/mvcBindingJson&quot;&gt;https://github.com/code-for-coffee/mvcBindingJson&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
        <pubDate>Wed, 16 Apr 2014 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/ASP.NET-MVC-Intro-to-Binding-JSON-objects-to-models</link>
        <guid isPermaLink="true">http://localhost:4000/ASP.NET-MVC-Intro-to-Binding-JSON-objects-to-models</guid>
        
        
      </item>
    
      <item>
        <title>Visual Studio MVC4 HTML5 Boilerplate Template</title>
        <description>&lt;p&gt;I’ve been working with &lt;strong&gt;ASP.NET MVC4&lt;/strong&gt; lately and decided to throw together a template for Visual Studio. This template works with Visual Studio 2010, 2012, and 2013. It provides a great quick start to any web application and includes the following based on &lt;a href=&quot;http://www.initializr.com/&quot;&gt;Initializr’s&lt;/a&gt; HTML5 boilerplate generator:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Mobile first, responsive (via normalize.css)&lt;/li&gt;
	&lt;li&gt;Modernizr (2.6.2)&lt;/li&gt;
	&lt;li&gt;Minified jQuery (1.10.1)&lt;/li&gt;
	&lt;li&gt;IE Classes&lt;/li&gt;
	&lt;li&gt;Chrome Frame support (until Google kills it off)&lt;/li&gt;
	&lt;li&gt;Favicon&lt;/li&gt;
	&lt;li&gt;Apple Touch Icons&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can grab the code on &lt;a href=&quot;https://github.com/code-for-coffee/visualstudio-mvc4-html5-boilerplate-template/&quot;&gt;github&lt;/a&gt;. Install it by placing the contents in your &lt;em&gt;C:\Users\username\Documents\Visual Studio 20xx\Templates\ProjectTemplates\Visual C#&amp;lt;/em&amp;gt; directory.  To get started with the template please take a look at how all of the views are setup.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Please feel free to report anything that doesn’t work here or on the &lt;a href=&quot;https://github.com/code-for-coffee/visualstudio-mvc4-html5-boilerplate-template/issues&quot;&gt;github issues page&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Jan 2014 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/Visual-Studio-MVC5-HTML5-Boilerplate-Template</link>
        <guid isPermaLink="true">http://localhost:4000/Visual-Studio-MVC5-HTML5-Boilerplate-Template</guid>
        
        
      </item>
    
      <item>
        <title>MVC4 AJAX uploads using HTML5/Javascript</title>
        <description>&lt;p&gt;This is a quick walkthrough showcasing how to use ASP.NET MVC4 to upload files via AJAX. You can take a look at the code on &lt;a href=&quot;https://github.com/code-for-coffee/mvc4-html5-ajax-upload&quot;&gt;github&lt;/a&gt;. This functionality requires a current version of Firefox, Chrome, or Internet Explorer 10+.&lt;/p&gt;

&lt;p&gt;We’ll begin with the controller. Your &lt;code&gt;controller.cs&lt;/code&gt; file should have a new &lt;strong&gt;JsonResult&lt;/strong&gt; to receive whatever you’re uploading. Inside, you’ll iterate through each Request.File sent to the server using the  &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.web.httppostedfile&quot;&gt;HttpPostedFileBase&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[HttpPost]
public JsonResult Upload()
{
for (int i = 0; i &amp;lt; Request.Files.Count; i++) {
// for each file being sent over…
HttpPostedFileBase file = Request.Files[i];&lt;/p&gt;

&lt;p&gt;// Example of gathering information from each file
int fileSize = file.ContentLength;
string fileName = file.FileName;
string mimeType = file.ContentType;&lt;/p&gt;

&lt;p&gt;// Open input stream
System.IO.Stream fileContent = file.InputStream;&lt;/p&gt;

&lt;p&gt;// do stuff here
// do.stuff.huzzah&lt;/p&gt;

&lt;p&gt;}
// Return JSON
return Json(“Uploaded “ + Request.Files.Count + “ file(s)”);
}&lt;/p&gt;

&lt;p&gt;&amp;lt;/code&amp;gt;&lt;/p&gt;

&lt;p&gt;Now, the fun part: the HTML5. First, you need to create a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FormData&quot;&gt;FormData&lt;/a&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
var formdata = new FormData();
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, you’ll iterate through each file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;for (i = 0; i &amp;lt; uploadedFiles.files.length; i++) {
}
&lt;/code&gt;
Inside of your loop, you can append each file to the FormData object.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;formdata.append(uploadedFiles.files[i].name, uploadedFiles.files[i]);
&amp;lt;/code&amp;gt;&lt;/p&gt;

&lt;p&gt;Finally, you can send the files over via a traditional Ajax call.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
var xhr = new XMLHttpRequest();
xhr.open('POST', ajaxPostPath);
xhr.send(formdata);
xhr.onreadystatechange = function () {
if (xhr.readyState == 4 &amp;amp;&amp;amp; xhr.status == 200) {
document.getElementById(idToPlaceResponseText).innerHTML = xhr.responseText;
}
&lt;/code&gt;
That’s it! Obviously, you can do some nifty stuff with the files if they’re supported. The code on the github project is designed to upload only files that are an Image MIME type and display a preview inside of an &amp;lt;code&amp;gt;id&amp;lt;/code&amp;gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Dec 2013 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/mvc4-ajax-uploads-using-html5javascript</link>
        <guid isPermaLink="true">http://localhost:4000/mvc4-ajax-uploads-using-html5javascript</guid>
        
        
      </item>
    
  </channel>
</rss>
